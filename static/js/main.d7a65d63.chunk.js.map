{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Empty","Title","Box","App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","datas","XML_Head","Infos","Info","map","data","Region","Town","Name","Add","Tel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2tBAGA,IAAMA,EAAYC,IAAOC,IAAV,KACTC,EAAQF,IAAOC,IAAV,KAMLE,EAAQH,IAAOC,IAAV,KAOLG,EAAMJ,IAAOC,IAAV,KA4EMI,MAvEf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAS,MAHtB,mBAGNK,EAHM,KAGCC,EAHD,KA4Bb,GAjBAC,qBAAU,WACRC,MAAM,GAAD,OARM,wCAQN,OANL,wEAOGC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCR,GAAY,GACZE,EAASM,MAKX,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IACCA,EACF,OAAO,0CAAaA,EAAMY,WACrB,GAAKV,EAEL,CACL,GAAc,OAAVE,EAAgB,CAClB,IAAMS,EAAQT,EAAMU,SAASC,MAAMC,KACnC,OACE,eAACxB,EAAD,WACE,eAACI,EAAD,WACE,cAACC,EAAD,2BACA,cAACA,EAAD,2BACA,cAACA,EAAD,uCACA,cAACA,EAAD,2BACA,cAACA,EAAD,8BAEDgB,EAAMI,KAAI,SAACC,GAAD,OACT,eAACvB,EAAD,WACE,cAACE,EAAD,UAAMqB,EAAKC,SACX,cAACtB,EAAD,UAAMqB,EAAKE,OACX,cAACvB,EAAD,UAAMqB,EAAKG,OACX,cAACxB,EAAD,UAAMqB,EAAKI,MACX,cAACzB,EAAD,UAAMqB,EAAKK,eAMnB,OACE,cAAC/B,EAAD,UACE,eAACI,EAAD,WACE,cAACC,EAAD,2BACA,cAACA,EAAD,2BACA,cAACA,EAAD,uCACA,cAACA,EAAD,2BACA,cAACA,EAAD,gCAhCR,OAAO,8CCzCI2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.d7a65d63.chunk.js","sourcesContent":["import \"./App.css\";\nimport styled from \"styled-components\";\nimport { useState, useEffect } from \"react\";\nconst Container = styled.div``;\nconst Empty = styled.div`\n  margin-top: -1;\n  font-size: 25px;\n  display: flex;\n  text-align: center;\n`;\nconst Title = styled.div`\n  border: 1px solid;\n  font-size: 25px;\n  display: flex;\n  text-align: center;\n  background: #00bfff;\n`;\nconst Box = styled.div`\n  border: 1px solid;\n  width: 286px;\n`;\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState(null);\n  const cors = \"https://cors-anywhere.herokuapp.com/\";\n  const url =\n    \"https://gis.taiwan.net.tw/XMLReleaseALL_public/scenic_spot_C_f.json\";\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(`${cors}${url}`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    if (items !== null) {\n      const datas = items.XML_Head.Infos.Info;\n      return (\n        <Container>\n          <Title>\n            <Box>地區</Box>\n            <Box>鄉鎮</Box>\n            <Box>公司名稱</Box>\n            <Box>地址</Box>\n            <Box>電話</Box>\n          </Title>\n          {datas.map((data) => (\n            <Empty>\n              <Box>{data.Region}</Box>\n              <Box>{data.Town}</Box>\n              <Box>{data.Name}</Box>\n              <Box>{data.Add}</Box>\n              <Box>{data.Tel}</Box>\n            </Empty>\n          ))}\n        </Container>\n      );\n    } else {\n      return (\n        <Container>\n          <Title>\n            <Box>地區</Box>\n            <Box>鄉鎮</Box>\n            <Box>公司名稱</Box>\n            <Box>地址</Box>\n            <Box>電話</Box>\n          </Title>\n        </Container>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}